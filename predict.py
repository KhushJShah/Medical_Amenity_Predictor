# -*- coding: utf-8 -*-
"""Predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kpit3LkKruDpumsoIEGrFdrIZP3pgLJw
"""

from google.colab import drive

drive.mount('/content/drive')

import pandas as pd
path = "/content/drive/MyDrive/US_Accidents.csv"
data = pd.read_csv(path)

import pandas as pd
from geopy.geocoders import ArcGIS
from geopy.extra.rate_limiter import RateLimiter
from geopy.distance import geodesic
import itertools

# Load the dataset
#file_path = "C:/Users/nupur/computer/Desktop/Intro_DS/DATS6101_Project/US_Accidents.csv"  # Update with the path to your CSV file
accidents_df = data

# Filter for San Jose
san_jose_df = accidents_df[accidents_df['City'] == 'San Jose']
san_jose_df = san_jose_df.dropna()
# Get unique streets
unique_streets = san_jose_df['Street'].unique()

# Initialize geolocator
geolocator = ArcGIS(user_agent="geoapiExercises")
geocode = RateLimiter(geolocator.geocode, min_delay_seconds=1)

def safe_geocode(address):
    try:
        return geocode(f"{address}, San Jose, CA")
    except Exception as e:
        print(f"Error during geocoding: {e}")
        return None

# Geocode streets
coordinates = {street: safe_geocode(street) for street in unique_streets}

# Calculate distances
distances = {}
for street1, street2 in itertools.combinations(unique_streets, 2):
    coord1, coord2 = coordinates.get(street1), coordinates.get(street2)
    if coord1 and coord2:
        distance = geodesic((coord1.latitude, coord1.longitude), (coord2.latitude, coord2.longitude)).kilometers
        distances[f"{street1} - {street2}"] = distance

# Create a new DataFrame from distances
distances_df = pd.DataFrame(list(distances.items()), columns=['Street Pair', 'Distance (km)'])

# Display the first few rows
print(distances_df.head())

print(distances_df.shape)

import matplotlib.pyplot as plt

# Plotting the histogram for the 'Distance (km)' column
plt.figure(figsize=(10, 6))
plt.hist(distances_df['Distance (km)'], bins=30, color='blue', edgecolor='black')
plt.title('Histogram of Distances Between Streets in San Jose')
plt.xlabel('Distance (km)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

# Filtering out rows where the distance is greater than 150 km
filtered_distances_df = distances_df[distances_df['Distance (km)'] <= 150]

# Display the first few rows of the filtered DataFrame
print(filtered_distances_df.head())

import matplotlib.pyplot as plt

# Plotting the histogram for the 'Distance (km)' column
plt.figure(figsize=(10, 6))
plt.hist(filtered_distances_df['Distance (km)'], bins=30, color='blue', edgecolor='black')
plt.title('Histogram of Distances Between Streets in San Jose')
plt.xlabel('Distance (km)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

# Speed of the paramedic vehicle in km/hr
speed_kmph = 80

# Calculate time in minutes
filtered_distances_df['Time (minutes)'] = (distances_df['Distance (km)'] / speed_kmph) * 60

# Display the first few rows of the DataFrame with the new column
filtered_distances_df.head()

plt.figure(figsize=(10, 6))
plt.hist(filtered_distances_df['Time (minutes)'], bins=30, color='blue', edgecolor='black')
plt.title('Histogram of Distances Between Streets in San Jose')
plt.xlabel('Time (minutes)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

# Assuming 'accidents_df' has columns 'Street' and 'SeverityProportion'
# Create a dictionary that maps streets to their severity proportion

severity_dict = accidents_df.set_index('Street')['SeverityProportion'].to_dict()

# Assuming the following:
# 'accidents_df' has columns 'Street' and 'SeverityProportion'
# 'filtered_distances_df' has columns 'Street Pair', 'Distance (km)', 'Time (minutes)'

# Create a mapping of streets to severity proportions
severity_proportions = accidents_df.drop_duplicates(subset='Street').set_index('Street')['SeverityProportion'].to_dict()

# Define a function to calculate weights
def calculate_weight(row, severity_dict):
    # Extract street names from 'Street Pair'
    street1, street2 = row['Street Pair'].split(' - ')
    severity1 = severity_dict.get(street1, 0)
    severity2 = severity_dict.get(street2, 0)
    # Use the higher severity proportion for the weight calculation
    higher_severity = max(severity1, severity2)
    return higher_severity * row['Time (minutes)']

# Apply the function to each row in 'filtered_distances_df'
filtered_distances_df['Weight'] = filtered_distances_df.apply(calculate_weight, axis=1, severity_dict=severity_proportions)

# Display the first few rows of the DataFrame with the new 'Weight' column
filtered_distances_df.head()

filtered_distances_df.head(15)

# Save the filtered DataFrame to a CSV file
filtered_distances_df.to_csv('filtered_distances.csv', index=False)

# Use the Google Colab file download feature
from google.colab import files
files.download('filtered_distances.csv')